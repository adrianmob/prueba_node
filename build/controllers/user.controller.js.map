{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["createHolder","req","res","checkRole","userId","role","body","email","password","clabe","Date","now","pool","query","query_cuenta","cuenta_id","rows","id","query_holder","length","json","holder","error","status","message","createDeposito","id_cuenta","deposito","balance","parseFloat","query_deposito","query_user"],"mappings":"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","sourcesContent":["import pool from \"../config\";\n\n// Recibe como parametro email y password y regresa el usuario creado\n\nexport const createHolder = async (req, res) => {\n  const role = await checkRole(req.userId);\n\n  if (role === \"ADMIN\") {\n    const { email, password } = req.body;\n\n    const clabe = Date.now();\n\n    const query_cuenta = await pool.query(\n      \"INSERT INTO cuenta (CLABE,balance)  VALUES ($1, $2) RETURNING *\",\n      [clabe, 0]\n    );\n    const cuenta_id = query_cuenta.rows[0].id;\n\n    const query_holder = await pool.query(\n      \"INSERT INTO users (email,password, role, cuenta_id) VALUES ($1,$2,$3,$4) RETURNING *\",\n      [email, password, \"HOLDER\", cuenta_id]\n    );\n\n    if (query_holder.rows.length > 0) {\n      res.json({\n        holder: query_holder.rows[0],\n      });\n    }\n\n    res.json({\n      error: \"error\",\n    });\n  } else {\n    res.status(401).json({\n      message: \"Unauthorized\",\n    });\n  }\n};\n\n// Recibe como parametro id_cuenta y deposito y regresa un mensaje de confirmacion de la transaccion\n\nexport const createDeposito = async (req, res) => {\n  const role = await checkRole(req.userId);\n\n  if (role === \"ADMIN\") {\n    const { id_cuenta, deposito } = req.body;\n    const query_cuenta = await pool.query(\n      \"SELECT balance from cuenta WHERE id=$1\",\n      [id_cuenta]\n    );\n\n    let balance = query_cuenta.rows[0].balance;\n    balance = parseFloat(balance);\n    balance += parseFloat(deposito);\n\n    const query_deposito = await pool.query(\n      \"UPDATE cuenta SET balance = ($1) WHERE id=$2 RETURNING *\",\n      [balance, id_cuenta]\n    );\n\n    if (query_deposito.rows.length > 0) {\n      res.json({\n        deposito: query_deposito.rows[0],\n      });\n    } else {\n      res.status(401).json({\n        error: \"error\",\n      });\n    }\n  } else {\n    res.status(401).json({\n      message: \"Unauthorized\",\n    });\n  }\n};\n\nconst checkRole = async (userId) => {\n  const query_user = await pool.query(\"SELECT role from users WHERE id=$1\", [\n    userId,\n  ]);\n\n  return query_user.rows[0].role;\n};\n"],"file":"user.controller.js"}